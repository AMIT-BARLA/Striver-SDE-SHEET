import java.util.* ;
import java.io.*; 
public class Solution 
{
    public static void sort012(int[] arr)
    {
        //Write your code here
        int low = 0 , mid = 0;
        int high = arr.length - 1;
        int temp = 0;
        while ( mid <= high ) {
            switch ( arr[mid] ){
                case 0 : {
                    temp = arr[low];
                    arr[low] = arr[mid];
                    arr[mid] = temp;
                    low++;
                    mid++;
                    break;
                }
                case 1 : {
                    mid++;
                    break;
                }
                case 2 : {
                    temp = arr[mid];
                    arr[mid] = arr[high];
                    arr[high] = temp;
                    high--;
                    break;
                }
            }
        }
    }
}

/*
Link - https://www.codingninjas.com/codestudio/problems/sort-0-1-2_631055?topList=striver-sde-sheet-problems&leftPanelTab=0

1. assumption low  for 0, mid for 1, high for 2.
2. [mid <= high] -> equal to because if it has only two values i.e. 0 and 1, 
example - 
0 1 1 0 0 1 1 0 1 0
lm                h
0 0 1 1 0 1 1 0 1 0 
    l   m         h
0 0 0 1 1 1 1 0 1 0
      l       m   h
0 0 0 0 1 1 1 1 1 0
        l         mh
0 0 0 0 0 1 1 1 1 1
          l       mh
The last index value will never be swapped if we dont put equal to symbol.
3. before low the values are '0', between low and mid values are '1' and lastly after mid the values will be 2.

TN - O(N)
SC - O(1)
*/
